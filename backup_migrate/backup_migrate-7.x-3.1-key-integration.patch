diff --git a/includes/destinations.ftp.inc b/includes/destinations.ftp.inc
index 34f24e0..d3435aa 100644
--- a/includes/destinations.ftp.inc
+++ b/includes/destinations.ftp.inc
@@ -91,6 +91,12 @@ class backup_migrate_destination_ftp extends backup_migrate_destination_remote {
     if (!$this->ftp) {
       $this->dest_url['port'] = empty($this->dest_url['port']) ? '21' : $this->dest_url['port'];
       $this->dest_url['pasv'] = $this->get_pasv();
+
+      // Use the Key module, if it is enabled.
+      if (module_exists('key') && $key_value = key_get_key_value($this->dest_url['pass'])) {
+        $this->dest_url['pass'] = $key_value;
+      }
+
       $this->ftp = drupal_ftp_ftp_object($this->dest_url['host'], $this->dest_url['port'], $this->dest_url['user'], $this->dest_url['pass'], $this->dest_url['path'], $this->dest_url['pasv']);
     }
     return $this->ftp;
diff --git a/includes/destinations.inc b/includes/destinations.inc
index 871a866..ae5d854 100644
--- a/includes/destinations.inc
+++ b/includes/destinations.inc
@@ -1258,7 +1258,12 @@ class backup_migrate_destination_remote extends backup_migrate_destination {
       '#description' => '',
       "#weight" => 40,
     );
-    if (@$this->dest_url['pass']) {
+    // Use the Key module if it is enabled.
+    if (module_exists('key')) {
+      $form['pass']['#type'] = 'key';
+      $form['pass']['#required'] = TRUE;
+    }
+    elseif (@$this->dest_url['pass']) {
       $form['old_password'] = array(
         "#type" => "value",
         "#value" => @$this->dest_url['pass'],
diff --git a/includes/destinations.nodesquirrel.inc b/includes/destinations.nodesquirrel.inc
index a929f07..3692909 100644
--- a/includes/destinations.nodesquirrel.inc
+++ b/includes/destinations.nodesquirrel.inc
@@ -24,6 +24,11 @@ function backup_migrate_nodesquirrel_check_secret_key($secret_key) {
  */
 function backup_migrate_nodesquirrel_get_destination($secret_key) {
   if ($secret_key) {
+    // Use the Key module, if it is enabled.
+    if (module_exists('key') && $key_value = key_get_key_value($secret_key)) {
+      $secret_key = $key_value;
+    }
+
     backup_migrate_include('destinations');
     $destination = backup_migrate_create_destination('nodesquirrel', array('machine_name' => 'nodesquirrel'));
     $destination->settings['secret_key'] = $secret_key;
@@ -104,6 +109,11 @@ function backup_migrate_nodesquirrel_credentials_settings_form($key = '', $statu
     '#size' => 80,
     '#default_value' => $key,
   );
+  // Use the key element, if it is available.
+  if (array_key_exists('key', module_invoke_all('element_info'))) {
+    $form['nodesquirrel_credentials']['nodesquirrel_secret_key']['#type'] = 'key';
+    unset($form['nodesquirrel_credentials']['nodesquirrel_secret_key']['#size']);
+  }
   if (empty($key)) {
     $form['nodesquirrel_credentials']['secret_key_help'] = backup_migrate_nodesquirrel_get_activate_help_text();
   }
@@ -357,6 +367,10 @@ class backup_migrate_destination_nodesquirrel extends backup_migrate_destination
     $out = array();
     $out['nodesquirrel'] = backup_migrate_create_destination('nodesquirrel', array('machine_name' => 'nodesquirrel'));
     if ($secret_key = variable_get('nodesquirrel_secret_key', '')) {
+      // Use the Key module, if it is enabled.
+      if (module_exists('key') && $key_value = key_get_key_value($secret_key)) {
+        $secret_key = $key_value;
+      }
       $out['nodesquirrel']->settings['secret_key'] = $secret_key;
     }
     else {
@@ -384,6 +398,12 @@ class backup_migrate_destination_nodesquirrel extends backup_migrate_destination
   function before_backup_form_validate($settings, $form, $form_state) {
     if (isset($form_state['values']['nodesquirrel_secret_key'])) {
       $key = trim($form_state['values']['nodesquirrel_secret_key']);
+
+      // Use the Key module, if it is enabled.
+      if (module_exists('key') && $key_value = key_get_key_value($key)) {
+        $key = $key_value;
+      }
+
       if ($error = $this->vaidate_key($key)) {
         form_set_error('secret_key', $error);
       }
@@ -554,7 +574,8 @@ class backup_migrate_destination_nodesquirrel extends backup_migrate_destination
     }
 
     $form['settings']['secret_key'] = array(
-      '#type' => 'textfield',
+      // Use the key element, if it is available.
+      '#type' => (array_key_exists('key', module_invoke_all('element_info'))) ? 'key' : 'textfield',
       '#title' => t('Secret Key'),
       '#default_value' => $key,
     );
@@ -574,6 +595,12 @@ class backup_migrate_destination_nodesquirrel extends backup_migrate_destination
    */
   function edit_form_validate($form, &$form_state) {
     $key = trim($form_state['values']['settings']['secret_key']);
+
+    // Use the Key module, if it is enabled.
+    if (module_exists('key') && $key_value = key_get_key_value($key)) {
+      $key = $key_value;
+    }
+
     if ($error = $this->vaidate_key($key)) {
       form_set_error('secret_key', $error);
     }
@@ -637,6 +664,10 @@ class backup_migrate_destination_nodesquirrel extends backup_migrate_destination
    */
   function get_user_pass() {
     $key = $this->settings('secret_key');
+    // Use the Key module, if it is enabled.
+    if (module_exists('key') && $key_value = key_get_key_value($key)) {
+      $key = $key_value;
+    }
     // The username is the first 32 chars.
     $user = substr($key, 0, 32);
     // The pass is the last 32 chars. There may be a separating character.
diff --git a/includes/destinations.s3.inc b/includes/destinations.s3.inc
index c049806..4a8d4cf 100644
--- a/includes/destinations.s3.inc
+++ b/includes/destinations.s3.inc
@@ -94,6 +94,11 @@ class backup_migrate_destination_s3 extends backup_migrate_destination_remote {
     $form['user']['#title'] = 'Access Key ID';
     $form['pass']['#title'] = 'Secret Access Key';
 
+    // Use the Key module, if it is enabled.
+    if (module_exists('key')) {
+      $form['pass']['#default_value'] = @$this->dest_url['key_name'];
+    }
+
     $form['subdir'] = array(
       '#type' => 'textfield',
       '#title' => t('Subdirectory'),
@@ -173,6 +178,11 @@ class backup_migrate_destination_s3 extends backup_migrate_destination_remote {
       if (file_exists($path . '/S3.php')) {
         require_once $path . '/S3.php';
         if (!$this->s3 && !empty($this->dest_url['user'])) {
+          // Use the Key module, if it is enabled.
+          if (module_exists('key') && $key_value = key_get_key_value($this->dest_url['pass'])) {
+            $this->dest_url['key_name'] = $this->dest_url['pass'];
+            $this->dest_url['pass'] = $key_value;
+          }
           $this->s3 = new S3($this->dest_url['user'], $this->dest_url['pass']);
         }
         return $this->s3;
